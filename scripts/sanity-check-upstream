#! /usr/bin/env ruby
# encoding: utf-8

require 'English'

class SanityChecker
  WORDS_OF_INTEREST = %w( cedar stack cve ).freeze

  attr_reader :our_repo, :their_repo

  def initialize(our_repo, their_repo)
    @our_repo = our_repo
    @their_repo = their_repo
    setup_repo
  end

  def setup_repo
    unless File.exist?(File.basename(our_repo))
      run("git clone -q -b develop #{our_repo}")
    end
    unless run_in_repo('git remote')[/upstream/]
      run_in_repo("git remote add upstream #{their_repo}")
    end
    run_in_repo('git remote update')
  end

  def find_dumb_commits_since(commit_hash)
    @commits ||= {}

    WORDS_OF_INTEREST.each do |word|
      commits_for_word = run_in_repo("git log -S #{word} --oneline --regexp-ignore-case #{commit_hash}..upstream/master").split("\n")
      next if commits_for_word.empty?

      commits_for_word.each do |commit_text|
        hash = commit_text[0, 7]
        logline = commit_text[8, commit_text.length]

        @commits[hash] = UpstreamCommit.new logline unless @commits[hash]
        @commits[hash].words << word
        @commits[hash].words.uniq!
      end
    end

    @commits
  end

  def last_merge_base
    @merge_base ||= run_in_repo('git merge-base origin/develop upstream/master').chomp
  end

  def has_dumb_commit_since_last_merge_base?
    !find_dumb_commits_since(last_merge_base).empty?
  end

  private

  def run_in_repo(command)
    Dir.chdir File.basename(our_repo) do
      run command
    end
  end

  def run(command)
    output = `#{command}`

    puts "$ #{command}"
    puts output

    raise output unless $CHILD_STATUS.success?
    output
  end
end

class UpstreamCommit
  attr_accessor :words
  attr_reader :logline

  def initialize(logline)
    @logline = logline
    @words = []
  end
end

reports = {}

{
  'ruby' => [
    'https://github.com/cloudfoundry/ruby-buildpack',
    'https://github.com/heroku/heroku-buildpack-ruby'
  ],
  'python' => [
    'https://github.com/cloudfoundry/python-buildpack',
    'https://github.com/heroku/heroku-buildpack-python'
  ],
  'nodejs' => [
    'https://github.com/cloudfoundry/nodejs-buildpack',
    'https://github.com/heroku/heroku-buildpack-nodejs'
  ],
  'go' => [
    'https://github.com/cloudfoundry/go-buildpack',
    'https://github.com/heroku/heroku-buildpack-go'
  ]
}.each do |name, repos|
  puts "Checking #{name}"
  ours, theirs = *repos

  sanity_checker = SanityChecker.new ours, theirs

  if sanity_checker.has_dumb_commit_since_last_merge_base?
    reports[name] = sanity_checker.find_dumb_commits_since(sanity_checker.last_merge_base)
  end
end

unless reports.empty?
  words_found_column_width = SanityChecker::WORDS_OF_INTEREST.join(', ').length
  puts '-------------'
  puts 'The following buildpacks failed the nanny test:'
  reports.each do |name, commits|
    puts "** #{name}:"
    puts "\thash\t#{'words found'.ljust(words_found_column_width)}\tlogline\t"
    puts "\t--------------------------------------------------------------------------------"
    commits.each do |hash, commit|
      words_found = commit.words.join(', ').ljust(words_found_column_width)
      puts "\t#{hash}\t#{words_found}\t#{commit.logline}\t"
    end
  end

  exit false
end
