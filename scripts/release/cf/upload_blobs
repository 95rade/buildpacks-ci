#!/usr/bin/env ruby

$stdout.sync = true

require 'yaml'
require 'fileutils'
require 'digest/sha1'

release_names=`ls | grep buildpack-github-release | cut -d '-' -f 1`.chomp.split

Dir.chdir('cf-release')
blob_store_private_yml = %Q(
---
blobstore:
  s3:
    access_key_id: #{ ENV["ACCESS_KEY_ID"] }
    secret_access_key: #{ ENV["SECRET_ACCESS_KEY"] }
)

File.write('config/private.yml', blob_store_private_yml)

release_names.each do |language|
  buildpack_blob     = Dir["../#{language}-buildpack-github-release/#{language}_buildpack-cached-*.zip"].first
  buildpack_path     = "#{language}-buildpack/#{File.basename(buildpack_blob)}"
  package_dir        = "packages/buildpack_#{language}"
  spec_file          = "#{package_dir}/spec"
  packaging_file     = "#{package_dir}/packaging"
  spec               = {
    'name' => "buildpack_#{language}",
    'files' => [buildpack_path]
  }

  FileUtils.mkdir_p(package_dir)
  puts 'Updating spec file'
  File.write(spec_file, YAML.dump(spec))
  puts 'Updating Packaging file'
  File.write(packaging_file, <<-PACKAGING_FILE)
    set -e -x
    cp #{buildpack_path} ${BOSH_INSTALL_TARGET}
  PACKAGING_FILE

  system "rm -f blobs/#{language}-buildpack/*"
  blobs = YAML.load(File.read('config/blobs.yml'))

  old_buildpack_key = blobs.keys.detect do |key|
    key =~ /^#{language}-buildpack\//
  end

  if old_buildpack_key
    new_sha = Digest::SHA1.file(buildpack_blob).hexdigest

    if new_sha != blobs[old_buildpack_key]['sha']
      blobs.delete(old_buildpack_key)
      File.write('config/blobs.yml', YAML.dump(blobs))
      exit 1 unless system "bosh add blob #{buildpack_blob} #{language}-buildpack"
    end
  end
end

exit system(<<-EOF)
  set -e

  bosh -n upload blobs
  git add -A
  git config --global user.email "cf-buildpacks-eng@pivotal.io"
  git config --global user.name "CF Buildpacks Team"

  /usr/bin/env bash ./scripts/setup-git-hooks
  git commit -m 'Upgrading buildpacks to latest versions'
EOF
