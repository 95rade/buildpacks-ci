# encoding: utf-8
require 'yaml'

class SystemCVEEmailPreparer
  def self.notify!(cves, related_to_stacks)
    write_directory = ENV['EMAIL_PREPARER_DIR']
    FileUtils.mkdir_p(write_directory)
    suffix = (related_to_stacks ? '-stacks-related' : '-stacks-unrelated')
    email_headers_file_path = File.join(write_directory, 'headers') + suffix
    email_subject_file_path = File.join(write_directory, 'subject') + suffix
    email_body_file_path = File.join(write_directory, 'body') + suffix
    write_email_headers_file(email_headers_file_path)
    write_email_subject_file(cves, email_subject_file_path)
    write_email_body_file(cves, email_body_file_path, related_to_stacks)
  end

  private

  def self.write_email_headers_file(write_path)
    headers = email_headers
    File.write(write_path, headers)
  end

  def self.write_email_subject_file(cves, write_path)
    subject = email_subject(cves)
    File.write(write_path, subject)
  end

  def self.write_email_body_file(cves, write_path, related_to_stacks)
    body = cves.map { |cve| formatted_cve(cve, related_to_stacks) }.join
    File.write(write_path, body)
  end

  def self.email_headers
    headers = <<-HEADERS
MIME-version: 1.0
Content-Type: text/html; charset="UTF-8"
HEADERS
  end

  def self.email_subject(cves)
    subject = 'New CVEs: ' + cves.map { |cve| cve[:title] }.join(', ')
  end

  def self.formatted_cve(cve, related_to_stacks)
    if related_to_stacks
      "<h1>#{cve[:title]}</h1>\n<h2>Does affect stacks</h2>\n\n#{cve[:raw_description]}\n"
    else
      "<h1>#{cve[:title]}</h1>\n<h2>Does not affect stacks</h2>\n\n#{cve[:raw_description]}\n"
    end
  end
end
