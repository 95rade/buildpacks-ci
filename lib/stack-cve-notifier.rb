require_relative "tracker-client"
require_relative "slack-client"
require_relative "cve-tags"
require 'octokit'

class StackCVENotifier < Struct.new(:cve_logger, :cves_dir, :stacks_dir)
  def run!(system_name, system_shorthand)
    cve_filename = "#{system_shorthand}.yaml"

    rss_cves = CVETags.new(stacks_dir).related_cves(system_name)

    rss_cve_titles = rss_cves.map { |cve| cve[:title] }
    yaml_cve_titles = cve_logger.read_yaml_cves(cve_filename)

    new_cve_titles = rss_cve_titles - yaml_cve_titles
    new_cves = rss_cves.select { |cve| new_cve_titles.include? cve[:title] }

    unless new_cves.empty?
      tracker_title = "address: #{new_cve_titles.join(', ')}"
      tracker_description = new_cves.map { |cve| cve[:description] }.join("\n\n--------\n\n")

      tracker_client = TrackerClient.new(
          ENV['TRACKER_API_TOKEN'],
          ENV['TRACKER_PROJECT_ID'],
          ENV['TRACKER_REQUESTER_ID'].to_i
      )

      tracker_client.post_to_tracker tracker_title, tracker_description

      slack_output = "There are *#{new_cves.length}* new CVEs:\n"

      new_cves.each do |cve|
        slack_output << "- #{cve[:title]}*\n"
      end

      slack_client = SlackClient.new(
          ENV['SLACK_WEBHOOK'],
          ENV['SLACK_CHANNEL'],
          'dependency-notifier'
      )
      slack_client.post_to_slack slack_output

      cve_logger.write_yaml_cves(
          rss_cve_titles | yaml_cve_titles,
          File.join(cves_dir, cve_filename)
      )

      new_cves.each do |cve|
        Octokit.create_issue(
          'pivotal-cf/pcf-security-notices',
          cve[:title],
          cve[:description]
        )
      end

      Dir.chdir(cves_dir) do
        raise 'command failed' unless system('git add -A')
        raise 'command failed' unless system("git commit -m 'CVE update'")
      end
    end
  end
end
