#!/usr/bin/env ruby

require 'yaml'

buildpack_path = ARGV[0]

if ARGV.count != 1
  puts "#{$0} [path_to_buildpack_zip]"
  exit 1
end

language = ENV['BUILDPACK_LANGUAGE']
unless language
  puts 'Language required'
  exit 1
end

version = ENV['BUILDPACK_VERSION']
unless version
  puts 'Version required'
  exit 1
end

unless File.exists? 'config/private.yml'
  puts 'Bosh requires a private.yml file'
  exit 1
end

unless ENV['GITHUB_CREDENTIALS']
  puts 'Github credentials required in ENV, used by "hub" command'
  exit 1
end

ENV['GITHUB_USER'], ENV['GITHUB_PASSWORD'] = ENV['GITHUB_CREDENTIALS'].split(':')

buildpack_filename = File.basename(buildpack_path)

# Assume Jenkins has checked out our cf-release fork
##git clone https://github.com/cf-buildpacks/cf-release.git

unless system 'git config remote.cloudfoundry.url'
  system 'git remote add cloudfoundry https://github.com/cloudfoundry/cf-release.git'
end

puts 'Updating cf-release to get newest develop branch'
exit 1 unless system 'git remote update'

branch_name = "#{language}-buildpack-v#{version}"
puts "creating branch: #{branch_name} based on cloudfoundry/develop"

exit 1 unless system "git checkout -b '#{branch_name}' cloudfoundry/develop"

package_dir = "packages/buildpack_#{language}"
spec_file = "#{package_dir}/spec"
packaging_file = "#{package_dir}/packaging"
buildpack_blob = "#{language}-buildpack/#{buildpack_filename}"

puts 'Updating spec file'
spec = YAML.load(File.read spec_file)
spec['files'] = [
  buildpack_blob
]

File.write(spec_file, YAML.dump(spec))

puts 'Updating Packaging file'
File.write(packaging_file, <<-PACKAGING_FILE)
set -e -x

cp #{buildpack_blob} ${BOSH_INSTALL_TARGET}
PACKAGING_FILE

puts 'Removing old buildpack from blobs.yml'
system "rm blobs/#{language}-buildpack/*"

blobs = YAML.load(File.read('config/blobs.yml'))

old_buildpack_key = blobs.keys.detect do |key|
  key =~ /^#{language}-buildpack\//
end

if old_buildpack_key
  blobs.delete(old_buildpack_key)
  File.write('config/blobs.yml', YAML.dump(blobs))
end

puts 'bosh add blob'
exit 1 unless system "bosh add blob #{buildpack_path} #{language}-buildpack"

new_blobs = `bosh blobs|grep '^new'`.chomp.split("\n")
puts new_blobs
unless new_blobs.size == 1
  puts 'incorrect number of changed blobs'
  exit 1
end

blob_name = new_blobs.first.split("\t")[1]
unless blob_name.include? buildpack_filename
  puts "Found #{blob_name}, expected #{buildpack_filename}"
  exit 1
end

puts 'bosh upload blobs'
exit 1 unless system 'bosh --non-interactive upload blobs'

puts 'Commiting changes'
exit 1 unless system "git add config/blobs.yml #{spec_file} #{packaging_file}"
exit 1 unless system "git commit -m 'Upgrading #{language} buildpack to v#{version}' --author='CF Buildpacks Team <cf-buildpacks-eng@pivotal.io>'"

puts 'Pushing changes to origin'
exit 1 unless system 'git push origin HEAD'

puts 'Submitting pull-request'
title = "Upgrading #{language} buildpack to v#{version}"
body = "Upgrading to latest stable version of #{language} buildpack\n --Buildpacks Team"

exit 1 unless system "hub pull-request -m '#{title}\n\n#{body}' -b cloudfoundry:develop < /dev/null"

