# encoding: utf-8
require 'spec_helper'
require_relative '../../../lib/notifiers/system-cve-email-preparer'

describe SystemCVEEmailPreparer do
  let(:cve1) do
    {
      title: 'USN-2875-1: libxml2 vulnerabilities',
      description: 'CVE Description 1',
      raw_description: '<p>CVE Description 1</p>'
    }
  end
  let(:cve2) do
    {
      title: 'USN-2874-1: Bind vulnerability',
      description: 'CVE Description 2',
      raw_description: '<p>CVE Description 2</p>'
    }
  end
  let(:cves) { [cve1, cve2] }
  let(:write_directory) { './output_directory' }

  before { allow(ENV).to receive(:[]).with('EMAIL_PREPARER_DIR').and_return(write_directory) }

  after { FileUtils.rm_rf(write_directory) }

  subject { described_class }

  describe '#notify!' do
    shared_examples_for 'creates the appropriate empty body file' do
      it 'creates an empty body file' do
        subject.notify!(cves, related_to_stacks)
        body_filename = 'body-stacks-' + (related_to_stacks ? 'related' : 'unrelated')
        body_file_path = File.join(write_directory, body_filename)
        body_file_contents = File.read(body_file_path)
        expect(File).to exist(body_file_path)
        expect(body_file_contents).to eq('')
      end
    end

    context 'has no cves' do
      let(:cves) { [] }

      context 'that are related to stacks' do
        let(:related_to_stacks) { true }

        it_behaves_like 'creates the appropriate empty body file'
      end

      context 'that are unrelated to stacks' do
        let(:related_to_stacks) { false }

        it_behaves_like 'creates the appropriate empty body file'
      end
    end

    context 'has cves' do
      shared_examples_for 'prepares email headers and subject' do
        it 'prepares the headers of an email with multiple cves' do
          subject.notify!(cves, related_to_stacks)
          headers_filename = 'headers-stacks-' + (related_to_stacks ? 'related' : 'unrelated')
          headers_content = File.read(File.join(write_directory, headers_filename))
          expect(headers_content).to eq(<<-BODY)
MIME-version: 1.0
Content-Type: text/html; charset="UTF-8"
BODY
        end

        it 'prepares the subject of an email with multiple cves' do
          subject.notify!(cves, related_to_stacks)
          subject_filename = 'subject-stacks-' + (related_to_stacks ? 'related' : 'unrelated')
          subject_content = File.read(File.join(write_directory, subject_filename))
          expect(subject_content).to eq('New CVEs: USN-2875-1: libxml2 vulnerabilities, USN-2874-1: Bind vulnerability')
        end
      end

      context 'that are related to stacks' do
        let(:related_to_stacks) { true }

        it_behaves_like 'prepares email headers and subject'

        it 'prepares the body of an email with multiple cves' do
          subject.notify!(cves, related_to_stacks)

          body_content = File.read(File.join(write_directory, 'body-stacks-related'))
          expect(body_content).to eq(<<-BODY)
<h1>USN-2875-1: libxml2 vulnerabilities</h1>
<h2><b>Present</b> in rootfs</h2>

<p>CVE Description 1</p>
<h1>USN-2874-1: Bind vulnerability</h1>
<h2><b>Present</b> in rootfs</h2>

<p>CVE Description 2</p>
BODY
        end
      end

      context 'that are unrelated to stacks' do
        let(:related_to_stacks) { false }

        it_behaves_like 'prepares email headers and subject'

        it 'prepares the body of an email with multiple cves' do
          subject.notify!(cves, related_to_stacks)

          body_content = File.read(File.join(write_directory, 'body-stacks-unrelated'))
          expect(body_content).to eq(<<-BODY)
<h1>USN-2875-1: libxml2 vulnerabilities</h1>
<h2><b>Not Present</b> in rootfs</h2>

<p>CVE Description 1</p>
<h1>USN-2874-1: Bind vulnerability</h1>
<h2><b>Not present</b> in rootfs</h2>

<p>CVE Description 2</p>
BODY
        end
      end
    end
  end
end
