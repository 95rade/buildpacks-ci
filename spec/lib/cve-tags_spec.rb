require 'spec_helper'
require 'webmock/rspec'
require_relative '../../lib/cve-tags'

describe CVETags do
  describe '#related_cves' do
    let (:target_dir) { File.expand_path(File.join(File.dirname(__FILE__), '..', 'fixtures', 'cve-notifications', 'stacks')) }
    let (:libpng_vulnerability) { "USN-2815-1: libpng vulnerabilities" }
    let (:libpng_description_fragment) { "libpng could be made to crash or run programs" }
    let (:rss_url) { 'http://www.ubuntu.com/usn/rss.xml' }
    let (:sample_xml) { File.join(File.dirname(__FILE__), '..', 'fixtures', 'cve-notifications', 'sample_cve.xml') }

    before do
      sample_feed = File.open(sample_xml, 'r').read
      stub_request(:get, rss_url).to_return(status: 200, body: sample_feed)
    end

    context 'has CVEs' do
      subject { described_class.new target_dir }

      it 'returns a list of CVEs related to repo' do
        response = subject.related_cves

        expect(a_request(:get, 'http://www.ubuntu.com/usn/rss.xml')).
          to have_been_made.once

        expect(response.first[:title]).to include libpng_vulnerability
        expect(response.first[:description]).to include libpng_description_fragment
      end
    end

    context 'has no CVEs' do
      let(:sample_xml) { File.join(File.dirname(__FILE__), '..', 'fixtures', 'cve-notifications', 'no_ubuntu1404_cve.xml') }
      subject { described_class.new target_dir }

      it 'returns an empty list of CVEs' do
        response = subject.related_cves

        expect(a_request(:get, 'http://www.ubuntu.com/usn/rss.xml')).
          to have_been_made.once

        expect(response).to eq []
      end
    end

    context 'no cflinuxfs2_receipt found' do
      subject { described_class.new target_dir }

      before do
        Dir.chdir target_dir do
          File.rename('cflinuxfs2/cflinuxfs2_receipt', 'cflinuxfs2/cflinuxfs2_receipt_backup')
        end
      end

      after do
        Dir.chdir target_dir do
          File.rename('cflinuxfs2/cflinuxfs2_receipt_backup', 'cflinuxfs2/cflinuxfs2_receipt')
        end
      end

      it 'raises an error without contacting the RSS feed' do
        message = "ERROR: cflinuxfs2/cflinuxfs2_receipt not found in '#{target_dir}'\n"
        expect{ subject.related_cves }.to raise_error(RuntimeError)

        expect(a_request(:get, 'http://www.ubuntu.com/usn/rss.xml')).
          not_to have_been_made
      end
    end

    context 'HTTP error' do
      before do
        stub_request(:get, rss_url).to_return(:status => [404, 'Page Not Found'])
      end

      subject { described_class.new target_dir }

      it 'raises an HTTP error' do
        expect{ subject.related_cves }.to raise_error(OpenURI::HTTPError)
      end
    end
  end
end
