# encoding: utf-8
require 'spec_helper'
require 'webmock/rspec'
require_relative '../../lib/buildpack-cve-tags'

describe BuildpackCVETags do
  describe '#related_cves' do
    # let(:target_dir) { File.expand_path(File.join(File.dirname(__FILE__), '..', 'fixtures', 'cve-notifications', 'stacks')) }
    let(:cve_title) { 'CVE-2015-7551: Unsafe tainted string usage in Fiddle and DL' }
    let(:cve_description) { 'http://www.ruby-lang.org/en/news/2015/12/16/unsafe-tainted-string-usage-in-fiddle-and-dl-cve-2015-7551/' }
    let(:rss_url) { 'http://www.ruby-lang.org/en/security' }
    let(:sample_html) { File.join(File.dirname(__FILE__), '..', 'fixtures', 'buildpack-cve-notifications', 'ruby', 'ruby-security-page.html') }
    # let(:system_name) { 'Ubuntu 14.04' }

    before do
      sample_feed = File.open(sample_html, 'r').read
      stub_request(:get, rss_url).to_return(status: 200, body: sample_feed)
    end

    context 'has CVEs' do
      subject { described_class.new 'ruby' }

      it 'returns a list of CVEs related to repo' do
        response = subject.related_cves

        expect(a_request(:get, rss_url))
          .to have_been_made.once

        expect(response.first[:title]).to include cve_title
        expect(response.first[:description]).to include cve_description
      end
    end

    # context 'has a CVE with multiple dependencies but only one matches' do
    #   subject { described_class.new target_dir }
    #   it 'returns that CVE in the list' do
    #     cves = subject.related_cves(system_name)

    #     expect(a_request(:get, 'http://www.ubuntu.com/usn/rss.xml'))
    #       .to have_been_made.once

    #     found_cve = cves.find { |cve| cve[:title] == 'USN-2810-1: Kerberos vulnerabilities' }
    #     expect(found_cve).to_not be_nil
    #   end
    # end

    # context 'has no CVEs' do
    #   let(:sample_xml) { File.join(File.dirname(__FILE__), '..', 'fixtures', 'cve-notifications', 'no_ubuntu1404_cve.xml') }
    #   subject { described_class.new target_dir }

    #   it 'returns an empty list of CVEs' do
    #     response = subject.related_cves(system_name)

    #     expect(a_request(:get, 'http://www.ubuntu.com/usn/rss.xml'))
    #       .to have_been_made.once

    #     expect(response).to eq []
    #   end
    # end

    # context 'no cflinuxfs2_receipt found' do
    #   subject { described_class.new target_dir }

    #   before do
    #     Dir.chdir target_dir do
    #       File.rename('cflinuxfs2/cflinuxfs2_receipt', 'cflinuxfs2/cflinuxfs2_receipt_backup')
    #     end
    #   end

    #   after do
    #     Dir.chdir target_dir do
    #       File.rename('cflinuxfs2/cflinuxfs2_receipt_backup', 'cflinuxfs2/cflinuxfs2_receipt')
    #     end
    #   end

    #   it 'raises an error without contacting the RSS feed' do
    #     message = "ERROR: cflinuxfs2/cflinuxfs2_receipt not found in '#{target_dir}'\n"
    #     expect { subject.related_cves(system_name) }.to raise_error(RuntimeError)

    #     expect(a_request(:get, 'http://www.ubuntu.com/usn/rss.xml'))
    #       .not_to have_been_made
    #   end
    # end

    context 'HTTP error' do
      before do
        stub_request(:get, rss_url).to_return(status: [404, 'Page Not Found'])
      end

      subject { described_class.new 'ruby' }

      it 'raises an HTTP error' do
        expect { subject.related_cves }.to raise_error(OpenURI::HTTPError)
      end
    end
  end
end
